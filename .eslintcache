[{"/home/jain/WhiteBoard-Final/src/index.js":"1","/home/jain/WhiteBoard-Final/src/App.js":"2","/home/jain/WhiteBoard-Final/src/components/container/Container.jsx":"3","/home/jain/WhiteBoard-Final/src/components/container/SetColor.jsx":"4","/home/jain/WhiteBoard-Final/src/components/container/Undo.jsx":"5","/home/jain/WhiteBoard-Final/src/components/container/SetLineWidth.jsx":"6","/home/jain/WhiteBoard-Final/src/components/container/LineTool.jsx":"7","/home/jain/WhiteBoard-Final/src/components/container/Clear.jsx":"8","/home/jain/WhiteBoard-Final/src/components/container/Pencil.jsx":"9","/home/jain/WhiteBoard-Final/src/components/board/Board.jsx":"10","/home/jain/WhiteBoard-Final/src/components/container/SnapShot.jsx":"11"},{"size":433,"mtime":1625486206034,"results":"12","hashOfConfig":"13"},{"size":183,"mtime":1625486206034,"results":"14","hashOfConfig":"13"},{"size":1497,"mtime":1625486669440,"results":"15","hashOfConfig":"13"},{"size":207,"mtime":1625486206034,"results":"16","hashOfConfig":"13"},{"size":194,"mtime":1625486206034,"results":"17","hashOfConfig":"13"},{"size":779,"mtime":1625486206034,"results":"18","hashOfConfig":"13"},{"size":312,"mtime":1625486206034,"results":"19","hashOfConfig":"13"},{"size":148,"mtime":1625486206034,"results":"20","hashOfConfig":"13"},{"size":340,"mtime":1625486206034,"results":"21","hashOfConfig":"13"},{"size":8397,"mtime":1625486206034,"results":"22","hashOfConfig":"13"},{"size":586,"mtime":1625486433710,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hvds6h",{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/jain/WhiteBoard-Final/src/index.js",[],"/home/jain/WhiteBoard-Final/src/App.js",["49"],"import logo from './logo.svg';\nimport './App.css';\nimport Container from './components/container/Container';\n\nfunction App() {\n  return (\n    <Container/>\n  );\n}\n\nexport default App;\n","/home/jain/WhiteBoard-Final/src/components/container/Container.jsx",["50"],"/home/jain/WhiteBoard-Final/src/components/container/SetColor.jsx",[],"/home/jain/WhiteBoard-Final/src/components/container/Undo.jsx",["51"],"import { func } from \"prop-types\"\nimport React from \"react\"\n\nfunction Undo(){\n        return(\n            <button id=\"undo\" className=\"style\">Undo</button>\n        )\n    }\n\n\nexport default Undo ","/home/jain/WhiteBoard-Final/src/components/container/SetLineWidth.jsx",[],"/home/jain/WhiteBoard-Final/src/components/container/LineTool.jsx",[],"/home/jain/WhiteBoard-Final/src/components/container/Clear.jsx",[],"/home/jain/WhiteBoard-Final/src/components/container/Pencil.jsx",[],"/home/jain/WhiteBoard-Final/src/components/board/Board.jsx",["52","53","54","55"],"import React, { createContext } from \"react\"\nimport './style.css'\n\n\nclass Board extends React.Component\n{\n        constructor(props){\n            super(props)\n        }\n        componentDidMount(){\n            this.drawOnCanvas();\n        }\n\n        drawOnCanvas(){\n        \n          const canvas = document.getElementById('board');\n          const ctx = canvas.getContext('2d');\n          var sketch = document.querySelector('#sketch');\n          var sketch_style = getComputedStyle(sketch);\n          canvas.width = parseInt(sketch_style.getPropertyValue('width'));            canvas.height=200;\n          canvas.height = parseInt(sketch_style.getPropertyValue('height'));\n          const undo = document.getElementById('undo');\n          let pathsry = [];\n          var checkboxChecked = false;\n          var toggle_line = true;\n          var toggle_pencil =true;\n          var pen_checkbox = false;\n          \n\n          // var Text=false\n    \n        \n       \n\n        const pencilBtn=document.getElementById('Pencil')\n         \n        pencilBtn.addEventListener('click',()=>{\n          pen_checkbox = pencilBtn.checked\n          if(pen_checkbox){\n          toggle_pencil=true;\n          toggle_line = false\n          }\n          Draw();\n        \n        })\n\n        function Draw(){\n          \n          ctx.lineCap = 'round';\n          // ctx.strokeStyle = color;\n          let drawing = false;\n          \n          let points = [];\n          \n          var mouse = {x: 0, y: 0};\n          var previous = {x: 0, y: 0};\n          \n          canvas.addEventListener('mousedown', function(e) {\n          drawing = true; \n          previous = {x:mouse.x,y:mouse.y};\n          mouse = oMousePos(canvas, e);\n          points = [];\n          points.push({x:mouse.x,y:mouse.y})\n          });\n          \n          canvas.addEventListener('mousemove', function main_draw(e) {\n\n          if (pen_checkbox){\n            if(drawing){\n            previous = {x:mouse.x,y:mouse.y};\n            mouse = oMousePos(canvas, e);\n            // saving the points in the points array\n            points.push({x:mouse.x,y:mouse.y})\n            // drawing a line from the previous point to the current point\n            ctx.beginPath();\n            ctx.moveTo(previous.x,previous.y);\n            ctx.lineTo(mouse.x,mouse.y);\n            ctx.stroke();\n            ctx.strokeStyle=color;\n            }\n          }\n          else if (!pen_checkbox || !toggle_pencil){\n            canvas.removeEventListener('mousemove',main_draw)\n\n          }\n\n          }, false);\n          \n          \n          canvas.addEventListener('mouseup', function() {\n          drawing=false;\n          // Adding the path to the array or the paths\n          pathsry.push(points);\n          }, false);\n        }\n          \n          undo.addEventListener(\"click\",Undo);\n          \n          function drawPaths(){\n            // delete everything\n            ctx.clearRect(0,0,canvas.width,canvas.height);\n            // draw all the paths in the paths array\n            pathsry.forEach(path=>{\n            ctx.beginPath();\n            ctx.moveTo(path[0].x,path[0].y);  \n            for(let i = 1; i < path.length; i++){\n              ctx.lineTo(path[i].x,path[i].y); \n            }\n              ctx.stroke();\n            })\n          }  \n          \n          function Undo(){\n            // remove the last path from the paths array\n            pathsry.splice(-1,1);\n            // draw all the paths in the paths array\n            drawPaths();\n          }\n          \n          \n          // a function to detect the mouse position\n          function oMousePos(canvas, evt) {\n            var ClientRect = canvas.getBoundingClientRect();\n              return { //objeto\n              x: Math.round(evt.clientX - ClientRect.left),\n              y: Math.round(evt.clientY - ClientRect.top)\n          }\n          }\n          \n          \n          \n          // Color change\n          var colorel = document.getElementById('setcolor')\n          var color = \"#000000\"\n          colorel.addEventListener('input',()=>{\n              color = colorel.value\n              \n              \n          })\n            /* Change Pen Width */\n          const buttons = document.getElementsByClassName('btn');\n          for (let x = 0; x < buttons.length; x++) {\n              buttons[x].addEventListener('click', () => {\n              ctx.lineWidth = parseInt(buttons[x].innerText);\n              });\n          }\n          //Clear Board\n          const clearBtn= document.getElementById('clear')\n          clearBtn.addEventListener('click',() => {\n              ctx.clearRect(0,0,canvas.width,canvas.height);\n              pathsry = []\n              //for text box\n              // console.log(document.getElementById('info'))\n              // document.getElementById('info').remove();\n\n          })\n          /* Draw Line*/\n          \n          const checkbox = document.getElementById('line-tool'); \n          checkbox.addEventListener('click', (e) => {\n            checkboxChecked = checkbox.checked;\n            if(checkboxChecked){\n              toggle_line = true\n              toggle_pencil = false\n              pen_checkbox = false\n            }\n      \n              drawLine();\n    \n            // else{\n            //   canvas.removeEventListener('click',)\n            // }\n          })\n\n\n          function drawLine() {\n            var points=[]\n            var coordinates = [];\n            canvas.addEventListener('click',function Clicked(e){\n              coordinates.push(oMousePos(canvas, e));\n              console.log(checkboxChecked)\n              if (coordinates.length == 2 && checkboxChecked ) {\n                // make the line\n                ctx.beginPath();\n                ctx.moveTo(coordinates[0].x, coordinates[0].y);\n                \n                ctx.lineTo(coordinates[1].x, coordinates[1].y);\n                \n                ctx.strokeStyle = colorel.value \n                ctx.stroke();\n                //set coordinates to []\n                coordinates = [];\n                \n              }\n              else if (!checkboxChecked || !toggle_line){\n                canvas.removeEventListener('click',Clicked)\n              }\n            })\n          }\n\n\n    \n                     //Text\n               \n    //       const TextToggle=document.getElementById('Text')\n         \n    //       TextToggle.addEventListener('click',()=>{\n    //           Text= true\n    //           console.log(Text)\n           \n    //       if(Text){\n    //       console.log('inhere')\n    //       var textarea=null\n    //       function mouseDownOnTextarea(e) {\n    //         console.log('textarea')\n    //         var x = textarea.offsetLeft - e.clientX,\n    //             y = textarea.offsetTop - e.clientY;\n    //         function drag(e) {\n    //             textarea.style.left = e.clientX + x + 'px';\n    //             textarea.style.top = e.clientY + y + 'px';\n    //         }\n    //         function stopDrag() {\n\n    //             document.removeEventListener('mousemove', drag);\n    //             document.removeEventListener('mouseup', stopDrag);\n    //         }\n    //         document.getElementById('board').addEventListener('mousedown', drag);\n    //         document.getElementById('board').addEventListener('mouseup', stopDrag);\n    //     }\n        \n    //     canvas.addEventListener('click', function(e) {\n    //       console.log('canvas click')\n    //         if (!textarea) {\n    //             textarea = document.createElement('textarea');\n    //             textarea.className = 'info';\n    //             textarea.id = 'info'\n    //             textarea.addEventListener('mousedown', mouseDownOnTextarea);\n    //             document.getElementById(\"sketch\").appendChild(textarea);\n    //         }\n    //         var x = e.clientX - canvas.offsetLeft,\n    //             y = e.clientY - canvas.offsetTop;\n    //         textarea.value = \"x: \" + x + \" y: \" + y;\n    //         textarea.style.top = e.clientY + 'px';\n    //         textarea.style.left = e.clientX + 'px';\n    //     }, false);\n    //     Text=false;\n    //   }\n    // })\n         \n};\n\n            \n        \n\n        render(){\n            return(\n                <div className=\"sketch\" id=\"sketch\">\n                    <canvas className=\"board\" id='board'></canvas>\n                </div>\n            )\n        }\n}\nexport default Board","/home/jain/WhiteBoard-Final/src/components/container/SnapShot.jsx",["56","57"],{"ruleId":"58","severity":1,"message":"59","line":1,"column":8,"nodeType":"60","messageId":"61","endLine":1,"endColumn":12},{"ruleId":"62","severity":1,"message":"63","line":14,"column":5,"nodeType":"64","messageId":"65","endLine":16,"endColumn":6},{"ruleId":"58","severity":1,"message":"66","line":1,"column":10,"nodeType":"60","messageId":"61","endLine":1,"endColumn":14},{"ruleId":"58","severity":1,"message":"67","line":1,"column":17,"nodeType":"60","messageId":"61","endLine":1,"endColumn":30},{"ruleId":"62","severity":1,"message":"63","line":7,"column":9,"nodeType":"64","messageId":"65","endLine":9,"endColumn":10},{"ruleId":"58","severity":1,"message":"68","line":177,"column":17,"nodeType":"60","messageId":"61","endLine":177,"endColumn":23},{"ruleId":"69","severity":1,"message":"70","line":182,"column":38,"nodeType":"71","messageId":"72","endLine":182,"endColumn":40},{"ruleId":"58","severity":1,"message":"73","line":5,"column":8,"nodeType":"60","messageId":"61","endLine":5,"endColumn":13},{"ruleId":"58","severity":1,"message":"74","line":6,"column":8,"nodeType":"60","messageId":"61","endLine":6,"endColumn":14},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'func' is defined but never used.","'createContext' is defined but never used.","'points' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'width' is assigned a value but never used.","'height' is assigned a value but never used."]